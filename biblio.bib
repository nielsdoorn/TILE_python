% Encoding: UTF-8

@inproceedings{Aaltonen2010,
  author       = {Aaltonen, Kalle and Ihantola, Petri and Sepp{\"{a}}l{\"{a}}, Otto},
  date         = {2010-10},
  title        = {Mutation analysis vs. code coverage in automated assessment of students{\textquoteright} testing skills},
  doi          = {10.1145/1869542.1869567},
  isbn         = {1450302408},
  pages        = {153--160},
  publisher    = {ACM},
  series       = {OOPSLA {\textquoteright}10},
  url          = {http://dl.acm.org/citation.cfm?id=1869567},
  abstractnote = {Learning to program should include learning about proper software testing. Some automatic assessment systems, e.g. Web-CAT, allow assessing student-generated test suites using coverage metrics. While this encourages testing, we have observed that sometimes students can get rewarded from high coverage although their tests are of poor quality. Exploring alternative methods of assessment, we have tested mutation analysis to evaluate students{\textquoteright} solutions. Initial results from applying mutation analysis to real course submissions indicate that mutation analysis could be used to fix some problems of code coverage in the assessment. Combining both metrics is likely to give more accurate feedback.},
  collection   = {OOPSLA {\textquoteright}10}
}

@article{Agarwal2006,
  author     = {Agarwal, Rahul and Edwards, Stephen H and P{\'{e}}rez-Qui{\~{n}}ones, Manuel A},
  date       = {2006-03},
  title      = {Designing an adaptive learning module to teach software testing},
  doi        = {10.1145/1124706.1121420},
  issn       = {0097-8418},
  number     = {1},
  pages      = {259--263},
  series     = {SIGCSE bulletin},
  volume     = {38},
  collection = {SIGCSE bulletin}
}

@misc{Barbosa,
  author       = {Barbosa, Ellen F and Silva, Marco A G and Corte, Camila K D and Maldonado, Jos{\'{e}} C},
  title        = {Session S1H Integrated Teaching of Programming Foundations and Software Testing},
  abstractnote = {performance concerning programming and testing.}
}

@Misc{Bijlsma2020,
  author       = {Bijlsma, A and Doorn, N and Passier, H. J. M and Pootjes, H. J and Stuurman, S},
  date         = {2020-05},
  title        = {How do students test software units?: Part one: Their natural attitude diagnosed},
  abstractnote = {To gain insight into ideas and beliefs of students who finished an introductionary course on programming without any formal education on testing, we asked students to fill in a small questionnaire, to make four exercises in which they had to write test cases to decide whether a specific method is correct or not and to determine the correctness of a given implementation, and to fill in a second questionnaire. We interviewed eleven of these students, in a semi-structured interview, to obtain more in-depth insight. The main outcome of our research shows that students do not test systematically, while most of them think they do test sytematically. We found that many (of most) students can only think of test cases based on programming code. Even if no code was provided (black box testing), students try to come up with code to base their test cases up on. We found more misconceptions related to testing.},
  groups       = {OwnPublications},
  publisher    = {Open Universiteit Nederland},
}

@InProceedings{Bijlsma,
  author = {Bijlsma, Lex and Doorn, Niels and Passier, Harrie and Pootjes, Harold and Stuurman, Sylvia},
  title  = {How do students test software units?},
  file   = {:Bijlsma - How Do Students Test Software Units_.pdf:PDF},
  groups = {OwnPublications},
}

@article{Buck2000,
  author       = {Buck, Duane and Stucki, David J.},
  date         = {2000-03},
  title        = {Design Early Considered Harmful: Graduated Exposure to Complexity and Structure Based on Levels of Cognitive Development},
  doi          = {10.1145/331795.331817},
  issn         = {0097-8418},
  number       = {1},
  pages        = {75--79},
  volume       = {32},
  abstractnote = {We have recognized that the natural tendency to teach according to the structure of one{\textquoteright}s own understanding runs contrary to established models of cognitive development. Bloom{\textquoteright}s Taxonomy has provided a basis for establishing a more efficacious pedagogy. Emphasizing a hierarchical progression of skill sets and gradual learning through example, our approach advocates teaching software development from the inside/out rather than beginning with either console apps or monolithic designs.},
  place        = {New York, NY, USA},
  publisher    = {Association for Computing Machinery}
}

@InProceedings{Buck2001,
  author = {Buck, Duane and Stucki, David J.},
  date   = {2001},
  title  = {JKarelRobot: a case study in supporting levels of cognitive development in the computer science curriculum},
  pages  = {16--20},
}

@PhdThesis{Doorn2018,
  author      = {Doorn, Niels},
  date        = {2018-07},
  institution = {Open Universiteit},
  title       = {How can more students become `test infected'},
  type        = {MSc thesis},
  groups      = {OwnPublications},
}

@Article{Edwards2004,
  author     = {Edwards, Stephen H.},
  date       = {2004-03},
  title      = {Using software testing to move students from trial-and-error to reflection-in-action},
  doi        = {10.1145/1028174.971312},
  issn       = {0097-8418},
  number     = {1},
  pages      = {26--30},
  series     = {SIGCSE bulletin},
  volume     = {36},
  collection = {SIGCSE bulletin},
  publisher  = {Association for Computing Machinery (ACM)},
}

@article{Edwards2014,
  author = {Edwards, Stephen and Shams, Zalia},
  date   = {2014},
  title  = {Do student programmers all tend to write the same software tests?},
  doi    = {10.1145/2591708.2591757}
}

@article{Garousi2020,
  author       = {Garousi, Vahid and Rainer, Austen and Lauv{{\aa}}s, Per and Arcuri, Andrea},
  date         = {2020},
  title        = {Software-testing education: A systematic literature mapping},
  doi          = {10.1016/j.jss.2020.110570},
  issn         = {0164-1212},
  pages        = {110570},
  series       = {Journal of Systems and Software},
  url          = {http://www.sciencedirect.com/science/article/pii/S0164121220300510},
  volume       = {165},
  abstractnote = {Context With the rising complexity and scale of software systems, there is an ever-increasing demand for sophisticated and cost-effective software testing. To meet such a demand, there is a need for a highly-skilled software testing work-force (test engineers) in the industry. To address that need, many university educators worldwide have included software-testing education in their software engineering (SE) or computer science (CS) programs. Many papers have been published in the last three decades (as early as 1992) to share experience from such undertakings. Objective Our objective in this paper is to summarize the body of experience and knowledge in the area of software-testing education to benefit the readers (both educators and researchers) in designing and delivering software testing courses in university settings, and to also conduct further education research in this area. Method To address the above need, we conducted a systematic literature mapping (SLM) to synthesize what the community of educators have published on this topic. After compiling a candidate pool of 307 papers, and applying a set of inclusion/exclusion criteria, our final pool included 204 papers published between 1992 and 2019. Results The topic of software-testing education is becoming more active, as we can see by the increasing number of papers. Many pedagogical approaches (how to best teach testing), course-ware, and specific tools for testing education have been proposed. Many challenges in testing education and insights on how to overcome those challenges have been proposed. Conclusion This paper provides educators and researchers with a classification of existing studies within software-testing education. We further synthesize challenges and insights reported when teaching software testing. The paper also provides a reference ({\textquotedblleft}index{\textquotedblright}) to the vast body of knowledge and experience on teaching software testing. Our mapping study aims to help educators and researchers to identify the best practices in this area to effectively plan and deliver their software testing courses, or to conduct further education-research in this important area.},
  collection   = {Journal of Systems and Software},
  file         = {:Garousi2020 - Software Testing Education_ a Systematic Literature Mapping.pdf:PDF}
}

@article{Gordon1961,
  author = {Gordon, William},
  date   = {1961},
  title  = {Synectics: The Development of Creative Capacity}
}

@book{Gossman2019,
  author       = {Gossman, Peter and Powell, Stephen},
  date         = {2019-09},
  title        = {Learning Gain: Can It Be Measured?},
  doi          = {10.1007/978-3-030-26342-3_3},
  isbn         = {9783030263416},
  pages        = {37--51},
  publisher    = {Springer International Publishing},
  series       = {Employability via Higher Education: Sustainability as Scholarship},
  abstractnote = {As the UK{\textquoteright}s Quality Assurance Agency for Higher Education ({\textquoteleft}QAA{\textquoteright}) has noted, {\textquoteleft}With an increasing tendency to see higher education as a product with a price tag, there is understandably growing interest in the extent to which academic programmes of study promote students{\textquoteright} employability and earning power.{\textquoteright} (QAA, 2013, para. 1) In this chapter, we address the {\textquoteleft}basics{\textquoteright} underpinning the notion of learning gain including the best means for its measurement and the motivations behind the need to both quantify and attribute the various changes in our students as brought about by their university learning experiences. A larger question remains: if we wish to measure (some) gains in learning, arguably we firstly need to define what it is that we are actually seeking to measure, rather than starting from a position of what might be measurable in the hope that something can be found. This in turn means that the concept of learning gain may become a very different thing according to the instrument of measurement used. This then leads on to a further issue: if we measure learning gain in one particular way, this clearly says something about the type(s) of learning that we most value, and what gain(s) may exist within them.},
  collection   = {Employability via Higher Education: Sustainability as Scholarship},
  place        = {Cham}
}

@misc{Ivanova2020,
  author       = {Ivanova, Anna A and Srikant, Shashank and Sueoka, Yotaro and Kean, Hope H and Dhamala, Riva and apos;reilly, Una-May and Bers, Marina U and Fedorenko, Evelina},
  date         = {2020-12},
  title        = {Comprehension of computer code relies primarily on domain-general executive brain regions},
  doi          = {10.7554/elife.58906},
  abstractnote = {Computer programming is a novel cognitive tool that has transformed modern society. What cognitive and neural mechanisms support this skill? Here, we used functional magnetic resonance imaging to investigate two candidate brain systems: the multiple demand (MD) system, typically recruited during math, logic, problem solving, and executive tasks, and the language system, typically recruited during linguistic processing. We examined MD and language system responses to code written in Python, a text-based programming language (Experiment 1) and in ScratchJr, a graphical programming language (Experiment 2); for both, we contrasted responses to code problems with responses to content-matched sentence problems. We found that the MD system exhibited strong bilateral responses to code in both experiments, whereas the language system responded strongly to sentence problems, but weakly or not at all to code problems. Thus, the MD system supports the use of novel cognitive tools even when the input is structurally similar to natural language.},
  collection   = {eLife},
  publisher    = {eLife Sciences Publications, Ltd},
  series       = {eLife},
  volume       = {9}
}

@inproceedings{Kolikant2005,
  author       = {Kolikant, Yifat},
  date         = {2005-10},
  title        = {Students{\textquoteright} alternative standards for correctness},
  doi          = {10.1145/1089786.1089790},
  isbn         = {9781595930439},
  pages        = {37--43},
  publisher    = {ACM},
  series       = {ICER {\textquoteright}05},
  url          = {http://dl.acm.org/citation.cfm?id=1089790},
  abstractnote = {We examined students{\textquoteright} definition of correctness as reflected by their decisions whether certain programs are correct. Using a questionnaire we found that students understand correctness as a relative property of the program and therefore might decide that a program is correct even when they evidence its incorrect behavior. We also found that students{\textquoteright} definitions of systematic testing are inherently different from that of professionals, yet are consistent with their tolerance to errors.},
  collection   = {ICER {\textquoteright}05}
}

@inproceedings{Kussmaul2008,
  author       = {Kussmaul, Clifton},
  date         = {2008-10},
  title        = {Scaffolding for multiple assignment projects in CS1 and CS2},
  doi          = {10.1145/1449814.1449890},
  isbn         = {9781605582207},
  pages        = {873--876},
  publisher    = {ACM},
  series       = {OOPSLA Companion {\textquoteright}08},
  url          = {http://dl.acm.org/citation.cfm?id=1449890},
  abstractnote = {This paper describes several projects which are used to support multiple assignments in CS 1 and CS 2. Each project has evolved into its present configuration over several years. This paper focuses specifically on various types of scaffolding used to increase the effectiveness of such projects, and identifies some lessons learned and best practices for faculty seeking to adapt or create such projects for their own environments.},
  collection   = {OOPSLA Companion {\textquoteright}08}
}

@inproceedings{Kuttal2020,
  author       = {Kuttal, Sandeep Kaur and Myers, Jarow and Gurka, Sam and Magar, David and Piorkowski, David and Bellamy, Rachel},
  date         = {2020-08},
  title        = {Towards Designing Conversational Agents for Pair Programming: Accounting for Creativity Strategies and Conversational Styles},
  doi          = {10.1109/VL/HCC50065.2020.9127276},
  pages        = {1--11},
  publisher    = {IEEE},
  series       = {2020 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)},
  url          = {https://ieeexplore.ieee.org/document/9127276},
  abstractnote = {Established research on pair programming reveals benefits, including increasing communication, creativity, self-efficacy, and promoting gender inclusivity. However, research has reported limitations such as finding a compatible partner, scheduling sessions between partners, and resistance to pairing. Further, pairings can be affected by predispositions to negative stereotypes. These problems can be addressed by replacing one human member of the pair with a conversational agent. To investigate the design space of such a conversational agent, we conducted a controlled remote pair programming study. Our analysis found various creative problem-solving strategies and differences in conversational styles. We further analyzed the transferable strategies from human-human collaboration to human-agent collaboration by conducting a Wizard of Oz study. The findings from the two studies helped us gain insights regarding design of a programmer conversational agent. We make recommendations for researchers and practitioners for designing pair programming conversational agent tools.},
  collection   = {2020 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)}
}

@inproceedings{MasapantaCarrion2018,
  author       = {Masapanta-Carri{\'{o}}n, Susana and Vel{\'{a}}zquez-Iturbide, J. {{\'{A}}}ngel},
  date         = {2018-02},
  title        = {A Systematic Review of the Use of Bloom{\textquoteright}s Taxonomy in Computer Science Education},
  doi          = {10.1145/3159450.3159491},
  isbn         = {1450351034},
  pages        = {441--446},
  publisher    = {ACM},
  series       = {SIGCSE {\textquoteright}18},
  url          = {http://dl.acm.org/citation.cfm?id=3159491},
  abstractnote = {Bloom{\textquoteright}s taxonomy is a model that allows characterizing students{\textquoteright} learning achievements. It is frequently used in computer science education (CSE), but its use is not straightforward. We present a systematic review conducted to know actual use of the taxonomy in CSE. We found that it was mostly used in programming education and to assess students{\textquoteright} performance. A more relevant contribution is a classification of authors{\textquoteright} difficulties. In particular, the most often reported difficulty is determining the level of the taxonomy where an assessment task can be classified. In addition, we present authors{\textquoteright} hypotheses about possible causes of the difficulties and the solutions they adopted.},
  collection   = {SIGCSE {\textquoteright}18}
}

@book{McCracken2001,
  author     = {McCracken, Michael and Almstrum, Vicki and Diaz, Danny and Guzdial, Mark and Hagan, Dianne and Kolikant, Yifat Ben-David and Laxer, Cary and Thomas, Lynda and Utting, Ian and Wilusz, Tadeusz},
  date       = {2001},
  title      = {A multi-national, multi-institutional study of assessment of programming skills of first-year CS students},
  pages      = {125--180},
  series     = {Working group reports from ITiCSE on Innovation and technology in computer science education},
  collection = {Working group reports from ITiCSE on Innovation and technology in computer science education},
  file       = {:McCracken2001 - A Multi National, Multi Institutional Study of Assessment of Programming Skills of First Year CS Students.pdf:PDF}
}

@book{Merrienboer2017,
  author    = {Merri{\"{e}}nboer, Jeroen JG van and Kirschner, Paul A},
  date      = {2017},
  title     = {Ten steps to complex learning: A systematic approach to four-component instructional design},
  publisher = {Routledge}
}

@inproceedings{Passier2017,
  author = {Passier, H.},
  date   = {2017},
  title  = {The role of Procedural Guidance in Software Engineering Education},
  doi    = {10.1145/3079368.3079398},
  pages  = {1--2}
}

@inproceedings{Scatalon2019,
  author       = {Scatalon, Lilian and Carver, Jeffrey and Garcia, Rog{\'{e}}rio and Barbosa, Ellen},
  date         = {2019-02},
  title        = {Software Testing in Introductory Programming Courses},
  doi          = {10.1145/3287324.3287384},
  isbn         = {145035890X},
  pages        = {421--427},
  publisher    = {ACM},
  series       = {SIGCSE {\textquoteright}19},
  url          = {http://dl.acm.org/citation.cfm?id=3287384},
  abstractnote = {Traditionally, students learn about software testing during intermediate or advanced computing courses. However, it is widely advocated that testing should be addressed beginning in introductory programming courses. In this context, testing practices can help students think more critically while working on programming assignments. At the same time, students can develop testing skills throughout the computing curriculum. Considering this scenario, we conducted a systematic mapping of the literature about software testing in introductory programming courses, resulting in 293 selected papers. We mapped the papers to categories with respect to their investigated topic (curriculum, teaching methods, programming assignments, programming process, tools, program/test quality, concept understanding, and students{\textquoteright} perceptions and behaviors) and evaluation method (literature review, exploratory study, descriptive/persuasive study, survey, qualitative study, experimental and experience report). We also identified the benefits and drawbacks of this teaching approach, as pointed out in the selected papers. The goal is to provide an overview of research performed in the area, highlighting gaps that should be further investigated.},
  collection   = {SIGCSE {\textquoteright}19}
}

@article{Schon1983,
  author = {Schon, D},
  date   = {1983},
  title  = {The reflective practitioner: how professionals think in action (London, Maurice Temple Smith)}
}

@inproceedings{Suh2020,
  author       = {Suh, Sangho and Lee, Martinet and Xia, Gracie and law, Edith},
  date         = {2020-08},
  title        = {Coding Strip: A Pedagogical Tool for Teaching and Learning Programming Concepts through Comics},
  doi          = {10.1109/VL/HCC50065.2020.9127262},
  pages        = {1--10},
  publisher    = {IEEE},
  series       = {2020 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)},
  url          = {https://ieeexplore.ieee.org/document/9127262},
  abstractnote = {The abstract nature of programming makes learning to code a daunting undertaking for many novice learners. In this work, we advocate the use of comics-a medium capable of presenting abstract ideas in a concrete, familiar way-for introducing programming concepts. Particularly, we propose a design process and related tools to help students and teachers create coding strips, a form of comic strips that are associated with a piece of code. We conducted two design workshops with students and high school computer science teachers to evaluate our design process and tools. We find that our design process and tools are effective at supporting the design of coding strips and that both students and teachers are excited about using coding strip as a tool for learning and teaching programming concepts.},
  collection   = {2020 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)}
}

@book{Surma2019,
  author       = {Surma, Tim and Vanhoyweghen, Kristel and Sluijsmans, Dominique and Camp, Gino and Muijs, Daniel and Kirschner, Paul A},
  date         = {2019-09},
  title        = {Wijze Lessen: Twaalf bouwstenen voor effectieve didactiek},
  isbn         = {9789077866528},
  publisher    = {Ten Brink Uitgevers},
  url          = {https://lirias.kuleuven.be/handle/123456789/642774},
  abstractnote = {Dagelijks geven duizenden leraren het beste van zichzelf voor de klas. Hoewel het takenpakket van de leraar heel divers is, blijft het geven van een goede les de kern van het vak. Zes auteurs uit Nederland en Belgi{\"{e}} met ruime ervaring in onderwijspraktijk en onderwijsonderzoek presenteren in dit boek de meest recente wetenschappelijke inzichten op het vlak van leren en instructie en verbinden deze inzichten met de praktijk van het lesgeven. Met dit boek hopen ze leraren en bij uitbreiding elke onderwijsprofessional te inspireren tot een onderwijspraktijk waar {\'{e}}lke leerling optimaal de kans krijgt om bij te leren. nrpages: 208 status: published}
}

@article{Tew2014,
  author = {Tew, Allison Elliott and McCracken, Mike and Thomas, Lynda and Paterson, James and Caspersen, Michael and Kolikant, Yifat Ben-David and Sorva, Juha},
  date   = {2014},
  title  = {A Fresh Look at Novice Programmers{\textquoteright} Performance and Their Teachers{\textquoteright} Expectations}
}

@article{Beck1998,
  author       = {Beck, Kent and Gamma, Erich},
  date         = {1998},
  journaltitle = {Java Report},
  title        = {Test infected: Programmers love writing tests},
  number       = {7},
  pages        = {37--50},
  url          = {http://members.pingnet.ch/gamma/junit.htm},
  volume       = {3},
  groups       = {TEST},
  publisher    = {Citeseer},
  timestamp    = {2017-06-06}
}

@online{cost,
  title       = {What is the actual cost of software failures?},
  url         = {https://undo.io/the-cost-of-software-failures/},
  urldate     = {2021-02-27},
  description = {Recent research by the Cambridge Judge Business School, in partnership with Undo, sought to understand the financial and business implications of software failures in modern Continuous Integration pipelines. This page examines the high-level findings of that research.}
}

@online{covid,
  title       = {2020 Software Failures Linked to COVID-19 | designnews.com},
  url         = {https://www.designnews.com/design-software/2020-software-failures-linked-covid-19},
  urldate     = {2021-02-27},
  description = {In addition to typical software failures, COVID-19 contributed several new types of bugs.}
}

@online{excel,
  title       = {Excel: Why using Microsofts tool caused Covid-19 results to be lost - BBC News},
  url         = {https://www.bbc.com/news/technology-54423988},
  urldate     = {2021-02-27},
  description = {The decision to use a spreadsheet format that dates back to the 1980s has proved to be unwise.}
}

@online{californiaCovid,
  title       = {California COVID-19 vaccine rollout hit with software system problems},
  url         = {https://www.msn.com/en-us/news/us/california-covid-19-vaccine-rollout-hit-with-software-system-problems/ar-BB1cAgjn},
  urldate     = {2021-02-27},
  description = {The online software problems are complicating efforts to get people vaccinated and contributing to California\'s slow vaccine rollout.}
}

@online{TechCrunch,
  title   = {TechCrunch is now a part of Verizon Media},
  url     = {https://techcrunch.com/2020/04/01/zoom-doom/?guccounter=1\&guce_referrer=aHR0cHM6Ly93d3cuaW5jLmNvbS8\&guce_referrer_sig=AQAAALV6vKV3yO598ZzJuO45XnscqbRNi_yRuus1FqDFh26yP1a2NLRMm5Si-jQMHCL6FGjGdXWMXL5VMgkt-poaYpW5UEJB7DIZ-N2UT9JpPrCXP06j6dCV4pOUJ0-kRjg7C1wnCJZ5gUR8BI_PY7zrGBeAb3MEmUMsKY8tIgx-asvF},
  urldate = {2021-02-27}
}

@online{Sanket,
  author      = {Sanket},
  title       = {The exponential cost of fixing bugs - DeepSource},
  url         = {https://deepsource.io/blog/exponential-cost-of-fixing-bugs/},
  urldate     = {2021-02-27},
  description = {The cost of finding and fixing defects in incredibly higher in production as compared to early stages of development --- often by an order of magnitude or two.},
  keywords    = {cost containment,bugs,software defects,agile}
}

@article{Leventhal1994,
  author       = {Leventhal, Laura Marie and Teasley, Barbee Eve and Rohlman, Diane Schertler},
  date         = {1994},
  journaltitle = {International Journal of Human-Computer Studies},
  title        = {Analyses of factors related to positive test bias in software testing},
  number       = {5},
  pages        = {717--749},
  volume       = {41},
  publisher    = {Elsevier}
}

@inproceedings{Edwards2014a,
  author       = {Edwards, Stephen H and Shams, Zalia},
  booktitle    = {Proceedings of the 2014 conference on Innovation \& technology in computer science education},
  date         = {2014},
  title        = {Do student programmers all tend to write the same software tests?},
  organization = {ACM},
  pages        = {171--176},
  summary      = {Analyse van de kwaliteit van tests die studenten inleveren (als onderdeel van opdrachten). Gemiddeld: minder dan 18procent van de test cases van de `master suite' (die opgesteld is door de teachers), branch-coverage was *wel* goed. Een aantal test cases werd vaak `gevonden' (maar die vonden weinig bugs), weinig gebruik gemaakt van boundary value testing, veel meer `happy path testing',}
}

@inproceedings{Radermacher2014,
  author       = {Radermacher, Alex and Walia, Gursimran and Knudson, Dean},
  booktitle    = {Companion Proceedings of the 36\textsuperscript{th} international conference on software engineering},
  date         = {2014},
  title        = {Investigating the skill gap between graduating students and industry expectations},
  doi          = {10.1145/2591062.2591159},
  organization = {ACM},
  pages        = {291--300},
  groups       = {EDU, SE},
  timestamp    = {2018-03-19}
}

@misc{Blakeslee2004,
  author = {Blakeslee, S},
  date   = {2004},
  title  = {The CRAAP Test. LOEX Quarterly, 31 (3): 6--7}
}

@Book{ACM2013,
  author    = {The Joint Task Force on Computing Curricula{,} Association for Computing Machinery ({ACM}){,} {IEEE} Computer Society},
  date      = {2013},
  title     = {Curriculum Guidelines for Undergraduate Programs in Computer Science},
  publisher = {ACM},
}

@Book{ACM2014,
  author    = {The Joint Task Force on Computing Curricula{,} Association for Computing Machinery ({ACM}){,} {IEEE} Computer Society},
  date      = {2014},
  title     = {Curriculum Guidelines for Undergraduate Degree Programs in Software Engineering},
  publisher = {ACM},
  series    = {Computing Curricula Series},
}

@inproceedings{Adams2009,
  author     = {Adams, Joel},
  booktitle  = {Proceedings of the 40\textsuperscript{th} ACM Technical Symposium on Computer Science Education},
  date       = {2009},
  title      = {Test-driven Data Structures: Revitalizing CS2},
  doi        = {10.1145/1508865.1508920},
  isbn       = {978-1-60558-183-5},
  location   = {Chattanooga, TN, USA},
  pages      = {143--147},
  publisher  = {ACM},
  series     = {SIGCSE '09},
  acmid      = {1508920},
  keywords   = {agile methods, cs2, data structures, pedagogy, test-driven development, unit testing},
  numpages   = {5},
  optaddress = {New York, NY, USA}
}

@book{Beizer1990,
  author    = {Beizer, Boris},
  date      = {1990},
  title     = {Software testing techniques},
  edition   = {second},
  publisher = {Van Nostrand Reinhold}
}

@inproceedings{Bijlsma2018,
  author    = {A. Bijlsma and H.J.M. Passier and H.J. Pootjes and S. Stuurman},
  booktitle = {Proceedings of the 7\textsuperscript{th} Computer Science Education Research Conference (CSERC)},
  date      = {2018-10},
  title     = {Integrated Test Development: An integrated and incremental approach to write software of high quality},
  doi       = {10.1145/3289406.3289408},
  editor    = {Vreda Pieterse and George Papadopoulos and Dave Stikkolorum and Harrie Passier},
  language  = {English},
  pages     = {9--20},
  publisher = {ACM},
  abstract  = {Creating test cases is a difficult task for students. The numberof existing recommendations on how to create test cases is over-whelming. There is a lack of guidelines on how to apply thoserecommendations one step after another. This problem even be-comes more complicated when students are taught to refactor theircode as a habit. We propose an approach to teach students how todevelop and test their code systematically, with refactoring inte-grated. In our approach, we pay attention to both functionality androbustness.},
  file      = {:Bijlsma2018 - Integrated Test Development_ an Integrated and Incremental Approach to Write Software of High Quality.pdf:PDF},
  keywords  = {Testing, Refactoring}
}

@article{Brito2012,
  author       = {Brito, Maria A.S.\ and Rosi, Jo\~ao L.\ and Souza, Simone R.S.\ de and Braga, Rosana T.V.},
  date         = {2012},
  journaltitle = {CLEI Electronic Journal},
  title        = {An Experience on Applying Software Testing for Teaching Introductory Programming Courses},
  number       = {1},
  volume       = {15},
  articleno    = {4}
}

@article{Almog2018,
  author       = {Almog, Dani and Chasidim, Hadas and Mark, Shlomo},
  date         = {2018},
  journaltitle = {World Transactions on Engineering and Technology Education (WIETE)},
  title        = {Quality and testing-new teaching approaches for software engineers},
  pages        = {2},
  volume       = {16}
}

@inproceedings{Barbosa2008,
  author       = {Barbosa, Ellen F.\ and Silva, Marco A.G.\ and Corte, Camila K.D.\ and Maldonado, Jos{\'e} C.},
  booktitle    = {2008 38\textsuperscript{th} Annual Frontiers in Education Conference},
  date         = {2008},
  title        = {Integrated teaching of programming foundations and software testing},
  organization = {IEEE},
  pages        = {S1H--5}
}

@article{Buck2000a,
  author       = {Buck, Duane and Stucki, David J},
  date         = {2000},
  journaltitle = {ACM SIGCSE Bulletin},
  title        = {Design early considered harmful: graduated exposure to complexity and structure based on levels of cognitive development},
  number       = {1},
  pages        = {75--79},
  volume       = {32},
  publisher    = {ACM}
}

@article{Chen2004,
  author       = {Chen, Tsong Yueh and Poon, Pak-Lok},
  date         = {2004},
  journaltitle = {IEEE Transactions on Education},
  title        = {Experience with teaching black-box testing in a computer science/software engineering curriculum},
  number       = {1},
  pages        = {42--50},
  volume       = {47},
  publisher    = {IEEE}
}

@article{Cetin2015,
  author       = {Ibrahim Cetin},
  date         = {2015},
  journaltitle = {Canadian Journal of Science, Mathematics and Technology Education},
  title        = {Students{\textquoteright} Understanding of Loops and Nested Loops in Computer Programming: An APOS Theory Perspective},
  doi          = {10.1080/14926156.2015.1014075},
  eprint       = {https://doi.org/10.1080/14926156.2015.1014075},
  number       = {2},
  pages        = {155--170},
  volume       = {15},
  publisher    = {Routledge}
}

@article{Clarke2017,
  author       = {Clarke, Peter J. and Davis, Debra L. and Chang-Lau, Raymond and King, Tariq M.},
  date         = {2017-08},
  journaltitle = {ACM Trans. Comput. Educ.},
  title        = {Impact of Using Tools in an Undergraduate Software Testing Course Supported by WReSTT},
  doi          = {10.1145/3068324},
  issn         = {1946-6226},
  number       = {4},
  volume       = {17},
  acmid        = {3068324},
  articleno    = {18},
  file         = {:Clarke2017 - Impact of Using Tools in an Undergraduate Software Testing Course Supported by WReSTT.pdf:PDF},
  issue_date   = {September 2017},
  keywords     = {Testing tools, code coverage, cyberlearning},
  numpages     = {28},
  optaddress   = {New York, NY, USA},
  publisher    = {ACM}
}

@Article{Desai2008,
  author       = {Desai, Chetan and Janzen, David and Savage, Kyle},
  date         = {2008},
  journaltitle = {ACM SIGCSE Bulletin},
  title        = {A survey of evidence for test-driven development in academia},
  doi          = {10.1145/1383602.1383644},
  number       = {2},
  pages        = {97--101},
  volume       = {40},
  file         = {:Desai2008 - A Survey of Evidence for Test Driven Development in Academia.pdf:PDF;:Desai2008 - A Survey of Evidence for Test Driven Development in Academia.pdf:PDF},
  groups       = {TILDE},
  publisher    = {ACM},
}

@inproceedings{Edwards2003,
  author    = {Edwards, Stephen H},
  booktitle = {Conference on Object Oriented Programming Systems Languages and Applications: Companion of the 18 th annual ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications},
  date      = {2003},
  title     = {Teaching software testing: automatic grading meets test-first coding},
  number    = {30},
  pages     = {318--319},
  volume    = {26}
}

@article{Edwards2004a,
  author       = {Edwards, Stephen H},
  date         = {2004},
  journaltitle = {ACM SIGCSE Bulletin},
  title        = {Using software testing to move students from trial-and-error to reflection-in-action},
  number       = {1},
  pages        = {26--30},
  volume       = {36},
  publisher    = {ACM},
  summary      = {Het gaat over introductionary computer science students, en TDD. Er wordt gesteld dat ze trial and error gebruiken om bugs te vinden (wordt onderbouwd met literatuur), en te repareren. De stelling is dat reflection in action helpt. Ze hebben de assessments veranderd: studenten moeten correctheid laten zien aan de hand van tests. De stelling is dat die aanpak reflection in action bevordert. Er wordt gewerkt met de TDD aanpak: eerst tests schrijuven. Uitwerkingen worden (automatisch) ge-assessed op: correctness, test completeness with respect to the code, test completeness and validity with respect to the problem.}
}

@inproceedings{Edwards2003a,
  author     = {Edwards, Stephen H.},
  booktitle  = {Companion of the 18\textsuperscript{th} Annual ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications},
  date       = {2003},
  title      = {Rethinking Computer Science Education from a Test-first Perspective},
  doi        = {10.1145/949344.949390},
  isbn       = {1-58113-751-6},
  location   = {Anaheim, CA, USA},
  pages      = {148--155},
  publisher  = {ACM},
  series     = {OOPSLA '03},
  acmid      = {949390},
  keywords   = {CS1, extreme programming, laboratory-based teaching, pedagogy, test-driven development},
  numpages   = {8},
  optaddress = {New York, NY, USA}
}

@inproceedings{Elbaum2007,
  author     = {Elbaum, Sebastian and Person, Suzette and Dokulil, Jon and Jorde, Matt},
  booktitle  = {Proceedings of the 29\textsuperscript{th} International Conference on Software Engineering},
  date       = {2007},
  title      = {Bug Hunt: Making Early Software Testing Lessons Engaging and Affordable},
  doi        = {10.1109/ICSE.2007.23},
  isbn       = {0-7695-2828-7},
  pages      = {688--697},
  publisher  = {IEEE Computer Society},
  series     = {ICSE '07},
  acmid      = {1248899},
  keywords   = {Software Testing Education, Web-based Tutorial.},
  numpages   = {10},
  optaddress = {Washington, DC, USA}
}

@article{Erdogmus2005,
  author       = {Erdogmus, Hakan and Morisio, Maurizio and Torchiano, Marco},
  date         = {2005},
  journaltitle = {IEEE Transactions on software Engineering},
  title        = {On the effectiveness of the test-first approach to programming},
  number       = {3},
  pages        = {226--237},
  volume       = {31},
  file         = {:Erdogmus2005 - On the Effectiveness of the Test First Approach to Programming.pdf:PDF},
  publisher    = {IEEE}
}

@article{Ginat2004,
  author       = {David Ginat},
  date         = {2004},
  journaltitle = {Computer Science Education},
  title        = {On Novice Loop Boundaries and Range Conceptions},
  doi          = {10.1080/0899340042000302709},
  eprint       = {https://doi.org/10.1080/0899340042000302709},
  number       = {3},
  pages        = {165--181},
  volume       = {14},
  publisher    = {Routledge}
}

@inproceedings{Gomez2016,
  author       = {G{\'o}mez, Omar S and Vegas, Sira and Juristo, Natalia},
  booktitle    = {Proceedings of the 38\textsuperscript{th} International Conference on Software Engineering Companion},
  date         = {2016},
  title        = {Impact of CS programs on the quality of test cases generation: An empirical study},
  organization = {ACM},
  pages        = {374--383}
}

@inproceedings{Jones2001,
  author       = {Jones, Edward L and Chatmon, Christy L},
  booktitle    = {Journal of Computing Sciences in Colleges},
  date         = {2001},
  title        = {A perspective on teaching software testing},
  number       = {3},
  organization = {Consortium for Computing Sciences in Colleges},
  pages        = {92--100},
  volume       = {16}
}
	
}

@inproceedings{Kaczmarczyk2010,
  author       = {Kaczmarczyk, Lisa C and Petrick, Elizabeth R and East, J Philip and Herman, Geoffrey L},
  booktitle    = {Proceedings of the 41\textsuperscript{st} ACM Technical Symposium on Computer Science Education},
  date         = {2010},
  title        = {Identifying student misconceptions of programming},
  organization = {ACM},
  pages        = {107--111}
}

@inproceedings{Keefe2006,
  author       = {Keefe, Karen and Sheard, Judithe and Dick, Martin},
  booktitle    = {Proceedings of the 8\textsuperscript{th} Australasian Conference on Computing Education-Volume 52},
  date         = {2006},
  title        = {Adopting XP practices for teaching object oriented programming},
  organization = {Australian Computer Society, Inc.},
  pages        = {91--100}
}

@inproceedings{Kolikant2005a,
  author       = {Kolikant, Yifat Ben-David},
  booktitle    = {Proceedings of the first international workshop on Computing education research},
  date         = {2005},
  title        = {Students' alternative standards for correctness},
  organization = {ACM},
  pages        = {37--43}
}

@article{Lemos2018,
  author       = {Lemos, Ot{\'a}vio Augusto Lazzarini and Silveira, F{\'a}bio Fagundes and Ferrari, Fabiano Cutigi and Garcia, Alessandro},
  date         = {2018},
  journaltitle = {Journal of Systems and Software},
  title        = {The impact of Software Testing education on code reliability: An empirical assessment},
  pages        = {497--511},
  volume       = {137},
  publisher    = {Elsevier}
}

@inproceedings{Marrero2005,
  author       = {Marrero, Will and Settle, Amber},
  booktitle    = {ACM SIGCSE Bulletin},
  date         = {2005},
  title        = {Testing first: emphasizing testing in early programming courses},
  number       = {3},
  organization = {ACM},
  pages        = {4--8},
  volume       = {37}
}

@inproceedings{Michaeli2017,
  author       = {Michaeli, Tilman and Romeike, Ralf},
  booktitle    = {Proceedings of the 12\textsuperscript{th} Workshop on Primary and Secondary Computing Education},
  date         = {2017},
  title        = {Addressing teaching practices regarding software quality: Testing and debugging in the classroom},
  organization = {ACM},
  pages        = {105--106}
}

@article{Mishra2017,
  author       = {Mishra, Deepti and Ostrovska, Sofiya and Hacaloglu, Tuna},
  date         = {2017},
  journaltitle = {Information Technology \& People},
  title        = {Exploring and expanding students{\textquoteright} success in software testing},
  number       = {4},
  pages        = {927--945},
  volume       = {30},
  file         = {:Mishra2017 - Exploring and Expanding Students’ Success in Software Testing.pdf:PDF},
  publisher    = {Emerald Publishing Limited}
}

@inproceedings{Murphy2008,
  author       = {Murphy, Laurie and Lewandowski, Gary and McCauley, Ren{\'e}e and Simon, Beth and Thomas, Lynda and Zander, Carol},
  booktitle    = {ACM SIGCSE Bulletin},
  date         = {2008},
  title        = {Debugging: the good, the bad, and the quirky--a qualitative analysis of novices' strategies},
  number       = {1},
  organization = {ACM},
  pages        = {163--167},
  volume       = {40}
}

@article{Pham2017,
  author       = {Pham, Raphael and Kiesling, Stephan and Singer, Leif and Schneider, Kurt},
  date         = {2017},
  journaltitle = {Software Quality Journal},
  title        = {Onboarding inexperienced developers: struggles and perceptions regarding automated testing},
  number       = {4},
  pages        = {1239--1268},
  volume       = {25},
  file         = {:Pham2017 - Onboarding Inexperienced Developers_ Struggles and Perceptions Regarding Automated Testing.pdf:PDF},
  publisher    = {Springer},
  summary      = {Testen wordt belangrijk gevonden in bewdrijven. De ervaring met studenten vanuit universiteiten is dat ze niet goed zijn in testen. Ze zijn te theoretisch opgeleid, is het idee. Interviws met mensen die graduates begeleiden die voor het eerst gaan werken als software engineer. Ze blijken moeite te hebben hun theroetische kennis om te zetten in het schrijven van goede tests. Ook hebben ze gebrek aan kennis over testen. New hires often do not know what to test and how to do it. Their test code does not quite hit the target and usually under- or over-asserts. Ze vinden testen vaak `overhead'.}
}

@inproceedings{Scatalon2017,
  author       = {Scatalon, Lilian Passos and Barbosa, Ellen Francine and Garcia, Rogerio Eduardo},
  booktitle    = {2017 IEEE Frontiers in Education Conference (FIE)},
  date         = {2017},
  title        = {Challenges to integrate software testing into introductory programming courses},
  organization = {IEEE},
  pages        = {1--9},
  summary      = {Geeft een overzicht van waar je allemaal aan moet denken wanneer je testen in het curriculum introduceert. Onder andere: hoe leer je studenten goede tests schrijven. Pointers naar artikelen die gaan over het hoe van leren testen. 1 pointer naar een overzicht van de problemen die studenten hebben met het schrijven van tests (Edwards-2014).}
}

@inproceedings{Sunyaev2015,
  author     = {Sunyaev, Ali and Basten, Dirk},
  booktitle  = {Proceedings of the 30\textsuperscript{th} Annual ACM Symposium on Applied Computing},
  date       = {2015},
  title      = {Truth and Myth of Independent Software Testing: A Controlled Human Experiment},
  doi        = {10.1145/2695664.2695684},
  isbn       = {9781450331968},
  location   = {Salamanca, Spain},
  pages      = {1722--1728},
  publisher  = {ACM},
  series     = {SAC {\textquoteright}15},
  keywords   = {independent software testing, software testing process, external software testing centers, software quality, controlled human experiment, software development},
  numpages   = {7},
  optaddress = {New York, NY, USA}
}

@inproceedings{Thuy1992,
  author       = {Thuy, N.},
  booktitle    = {Fifth International Software Quality Week},
  date         = {1992},
  title        = {Testability and unit tests in large object-oriented software},
  organization = {Software Research Institute},
  pages        = {1--9}
}

@inproceedings{Whalley2011,
  author       = {Whalley, Jacqueline L and Philpott, Anne},
  booktitle    = {Proceedings of the Thirteenth Australasian Computing Education Conference-Volume 114},
  date         = {2011},
  title        = {A unit testing approach to building novice programmers' skills and confidence},
  organization = {Australian Computer Society, Inc.},
  pages        = {113--118}
}

@book{Merrienboer2013,
  author     = {van Merri\"enboer, Jeroen J.G. and Kirschner, Paul A.},
  date       = {2013},
  title      = {Ten Steps to Complex Learning, a systematic appraoch to four-component instructional design},
  edition    = {second},
  publisher  = {Taylor \& Francis},
  optaddress = {New York, NY, USA}
}

@book{Someren1994,
  author     = {Someren, M. van and Barnard, Y. van and Sandberg, J.},
  date       = {1994},
  title      = {The think aloud method: A practical guide to modelling cognitive processes},
  publisher  = {Academic Press},
  optaddress = {Londen}
}

@article{Kirschner2006,
  author       = {Kirschner, P.A. and Sweller, J. and Clark, R.E.},
  date         = {2006},
  journaltitle = {Educational psychologist},
  title        = {Why minimal guidance during instruction does not work: An analysis of the failure of constructivist, discovery, problem-based, experiential, and inquiry-based teaching},
  number       = {2},
  pages        = {75--86},
  url          = {\url{http://www.cogtech.usc.edu/publications/kirschner_Sweller_Clark.pdf}},
  volume       = {41},
  file         = {:Kirschner2006 - Why Minimal Guidance during Instruction Does Not Work_ an Analysis of the Failure of Constructivist, Discovery, Problem Based, Experiential, and Inquiry Based Teaching.pdf:PDF},
  publisher    = {Taylor \& Francis},
  summary      = {Een groot aantal onderwijsaanpakken (discovery learning, problem-based learning, inquiry learning, experimental learning, constructivist learning) houden in dat leerlingen zelf kennis moeten construeren, met zo weinig mogelijk instructional guidance. Het artikel laat zien dat zoiets niet werkt: er is expliciete guidance nodig.Het artikel laat dat zien op basis van wat we over het geheugen weten:. Het werkgeheugen heeft slechts een beperkte capaciteit. Wanneer er te veel nieuwe dingen tegelijkertijd geprocessed moeten worden, kan er niets naar het long term geheugen worden verplaatst. Dat wordt aangevuld met onderzoek in de praktijk,, dat bevestigt dat studenten/leerlingen veel meer leren met expliciete instructional guidance.}
}

@misc{Dijkstra1975,
  author = {Dijkstra, E.W.},
  date   = {1975},
  title  = {How do we tell truths that might hurt},
  note   = {EWD 498},
  url    = {https://www.cs.utexas.edu/users/EWD/welcome.html}
}

@article{Berre2018,
  author       = {Berre, Arne J and Huang, Shihong and Murad, Hani and Alibakhsh, Hanieh},
  date         = {2018},
  journaltitle = {Computer Science Education},
  title        = {Teaching modelling for requirements engineering and model-driven software development courses},
  number       = {1},
  pages        = {42--64},
  volume       = {28},
  file         = {:Berre2018 - Teaching Modelling for Requirements Engineering and Model Driven Software Development Courses.pdf:PDF},
  publisher    = {Taylor \& Francis}
}

@inproceedings{Sabitzer2018,
  author       = {Sabitzer, Barbara and Demarle-Meusel, Heike and Jarnig, Maria},
  booktitle    = {2018 IEEE Global Engineering Education Conference (EDUCON)},
  date         = {2018},
  title        = {Computational thinking through modeling in language lessons},
  organization = {IEEE},
  pages        = {1913--1919}
}

@inproceedings{Badreldin2015,
  author       = {Badreldin, Omar and Lethbridge, Timothy and Sturm, Arnon and Dixon, Waylon and Hamou-Lhadj, Abdelwahab and Simmons, Ryan},
  date         = {2015},
  title        = {The effects of education on students' perception of modeling in software engineering},
  organization = {CEUR Workshop Proceedings}
}

@inproceedings{Gerbe2011,
  author       = {Gerbe, Olivier and Raynauld, Jacques and Kerherve, Brigitte and others},
  booktitle    = {2011 Seventh International Conference on Signal Image Technology \& Internet-Based Systems},
  date         = {2011},
  title        = {From Models to Webapps},
  organization = {IEEE},
  pages        = {69--74}
}

@article{Wang,
  author = {Wang, Disi},
  title  = {A Model-driven Approach to Developing a Web-based Environment to Support Problem-based Learning}
}

@article{Landwehr2017,
  author       = {Landwehr, Carl and Ludewig, Jochen and Meersman, Robert and Parnas, David Lorge and Shoval, Peretz and Wand, Yair and Weiss, David and Weyuker, Elaine},
  date         = {2017-03},
  journaltitle = {J. Syst. Softw.},
  title        = {Software Systems Engineering Programmes a Capability Approach},
  doi          = {10.1016/j.jss.2016.12.016},
  issn         = {0164-1212},
  number       = {C},
  pages        = {354--364},
  volume       = {125},
  abstract     = {Discusses undergraduate programmes that prepare graduates for a career building software intensive systems.Presents detailed description of capabilities that graduates should have acquired.Derived from historical discussions of the field.Explains differences between Science programmes and Engineering programmes.Presents a broad set of specialized programs. This paper discusses third-level educational programmes that are intended to prepare their graduates for a career building systems in which software plays a major role. Such programmes are modelled on traditional Engineering programmes but have been tailored to applications that depend heavily on software. Rather than describe knowledge that should be taught, we describe capabilities that students should acquire in these programmes. The paper begins with some historical observations about the software development field.},
  issue_date   = {March 2017},
  keywords     = {Software documentation, Education, Information systems, Software education, Software development, Engineering, Software design},
  location     = {USA},
  numpages     = {11},
  publisher    = {Elsevier Science Inc.}
}

@techreport{ComputingCurricula2015,
  author    = {The Joint Task Force on Computing Curricula},
  date      = {2015},
  title     = {Curriculum Guidelines for Undergraduate Degree Programs in Software Engineering},
  location  = {New York, NY, USA},
  abstract  = {The primary purpose of this volume is to provide guidance to academic institutions and accreditation agencies about what should constitute an undergraduate software engineering education. These recommendations have been developed by a broad, internationally based group of volunteer participants. This group has taken into account much of the work that has been done in software engineering education over the last quarter of a century. Software engineering curriculum recommendations are of particular relevance, since there is currently a surge in the creation of software engineering degree programs and accreditation processes for such programs have been established in a number of countries.},
  publisher = {Association for Computing Machinery}
}

@inproceedings{Rapos2018,
  author    = {Rapos, Eric J.},
  booktitle = {Proceedings of the 21\textsuperscript{st} ACM/IEEE International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
  date      = {2018},
  title     = {We'll Make Modelers out of 'em yet: Introducing Modeling into a Curriculum},
  doi       = {10.1145/3270112.3270113},
  isbn      = {9781450359658},
  location  = {Copenhagen, Denmark},
  pages     = {130--134},
  publisher = {Association for Computing Machinery},
  series    = {MODELS '18},
  abstract  = {The prevalence of model-driven software engineering in industry combined with a personal interest in the topic led to the conception of a new course aimed at introducing students to topics related to modeling. This paper presents a retrospective examination of this course, including: a course overview, intra-student grade comparisons on topic-centered assessments, and student feedback regarding course topics and implementation. The paper provides sufficient detail of the course offering such that, if desired, readers could offer a course with similar goals, outcomes, and structure. Finally, specific lessons learned are presented in hopes of enabling future improvements to the course and as a warning to other academics should they begin to offer similar courses.},
  address   = {New York, NY, USA},
  numpages  = {5}
}

@inproceedings{Penzenstadler2018,
  author    = {Penzenstadler, Birgit and Betz, Stefanie and Venters, Colin C. and Chitchyan, Ruzanna and Porras, Jari and Seyff, Norbert and Duboc, Leticia and Becker, Christoph},
  booktitle = {Proceedings of the 40\textsuperscript{th} International Conference on Software Engineering: Software Engineering Education and Training},
  date      = {2018},
  title     = {Everything is INTERRELATED: Teaching Software Engineering for Sustainability},
  doi       = {10.1145/3183377.3183382},
  isbn      = {9781450356602},
  location  = {Gothenburg, Sweden},
  pages     = {153--162},
  publisher = {Association for Computing Machinery},
  series    = {ICSE-SEET '18},
  abstract  = {Sustainability has become an important concern across many disciplines, and software systems play an increasingly central role in addressing it. However, teaching students from software engineering and related disciplines to effectively act in this space requires interdisciplinary courses that combines the concept of sustainability with software engineering practice and principles. Yet, presently little guidance exist on which subjects and materials to cover in such courses and how, combined with a lack of reusable learning objects. This paper describes a summer school course on Software Engineering for Sustainability (SE4S). We provide a blueprint for this course, in the hope that it can help the community develop a shared approach and methods to teaching SE4S. Practical lessons learned from delivery of this course are also reported here, and could help iterate over the course materials, structure, and guidance for future improvements. The course blueprint, availability of used materials and report of the study results make this course viable for replication and further improvement.},
  address   = {New York, NY, USA},
  file      = {:Penzenstadler2018 - Everything Is INTERRELATED_ Teaching Software Engineering for Sustainability.pdf:PDF},
  keywords  = {sustainability education, sustainability, software engineering, pedagogy, sustainability design},
  numpages  = {10}
}

@misc{Enoiu2020,
  author      = {Eduard Enoiu and Gerald Tukseferi and Robert Feldt},
  date        = {2020},
  title       = {Towards a Model of Testers' Cognitive Processes: Software Testing as a Problem Solving Approach},
  eprint      = {2007.08927},
  eprintclass = {cs.SE},
  eprinttype  = {arXiv},
  file        = {:Enoiu2020 - Towards a Model of Testers' Cognitive Processes_ Software Testing As a Problem Solving Approach.pdf:PDF;:enoiu2020model - Towards a Model of Testers' Cognitive Processes_ Software Testing As a Problem Solving Approach.pdf:PDF}
}

@inproceedings{Jones2000,
  author       = {Jones, Edward},
  booktitle    = {Proceedings of the Australasian Conference on Computing Education},
  date         = {2000-12},
  title        = {Software testing in the computer science curriculum -- a holistic approach},
  doi          = {10.1145/359369.359392},
  isbn         = {1581132719},
  location     = {Melbourne, Australia},
  pages        = {153--157},
  publisher    = {ACM},
  series       = {ACSE {\textquoteright}00},
  url          = {http://dl.acm.org/citation.cfm?id=359392},
  abstractnote = {Although testing accounts for 50% of the cost of software, it receives little treatment in most curricula. This paper presents some approaches to giving all students multiple, incremental exposures to software testing throughout the curriculum. A unifying framework is presented which identifies a minimal set of test experiences, skills and concepts students should accumulate. The holistic approach combines common test experiences in core courses, an elective course in software testing, and volunteer participation in a test laboratory.},
  acmid        = {359392},
  collection   = {ACSE {\textquoteright}00},
  numpages     = {5},
  optaddress   = {New York, NY, USA}
}

@inproceedings{Krutz2014,
  author       = {Krutz, Daniel E. and Malachowsky, Samuel A. and Reichlmayr, Thomas},
  booktitle    = {Proceedings of the 45\textsuperscript{th} ACM Technical Symposium on Computer Science Education},
  date         = {2014-03},
  title        = {Using a real world project in a software testing course},
  doi          = {10.1145/2538862.2538955},
  isbn         = {1450326056},
  location     = {Atlanta, Georgia, USA},
  pages        = {49--54},
  publisher    = {ACM},
  series       = {SIGCSE {\textquoteright}14},
  url          = {http://dl.acm.org/citation.cfm?id=2538955},
  abstractnote = {Although testing often accounts for 50% of the budget of a typical software project, the subject of software testing is often overlooked in computing curriculum. Students often view testing as a boring and unnecessary task, and education is usually focused on building software, not ensuring its quality. Previous works have focused on either making the subject of testing more exciting for students or on a more potent lecture-based learning process. At the Department of Software Engineering at the Rochester Institute of Technology, recent efforts have been focused on the project component of our Software Testing course as an area of innovation. Rather than previous methods such as a tightly controlled and repetitive testbed, our students are allowed to choose a real-world, open source project to test throughout the term. With the instructor as both counsel and client, students are expected to deliver a test plan, a final report, and several class-wide presentations. This project has achieved significant student praise; qualitative and quantitative feedback demonstrates both increased satisfaction and fulfilled curricular requirements. Students enjoy the real-world aspect of the project and the ability to work with relevant applications and technologies. This paper outlines the project details and educational goals.},
  acmid        = {2538955},
  collection   = {SIGCSE {\textquoteright}14},
  keywords     = {software engineering education, software project, software testing},
  numpages     = {6},
  optaddress   = {New York, NY, USA}
}

@article{Merrienboer2002,
  author       = {van Merri{\"e}nboer, Jeroen J.G. and Clark, Richard E. and De Croock, Marcel B.M.},
  date         = {2002},
  journaltitle = {Educational Technology Research and Development},
  title        = {Blueprints for complex learning: The 4C/ID-model},
  number       = {2},
  pages        = {39--61},
  volume       = {50},
  file         = {:Merrienboer2002 - Blueprints for Complex Learning_ the 4C_ID Model.pdf:PDF},
  journal      = {Educational Technology Research and Development},
  publisher    = {Springer}
}

@article{Itkonen2012,
  author       = {Itkonen, Juha and M{\"a}ntyl{\"a}, Mika V and Lassenius, Casper},
  date         = {2012},
  journaltitle = {IEEE Transactions on Software Engineering},
  title        = {The role of the tester's knowledge in exploratory software testing},
  number       = {5},
  pages        = {707--724},
  volume       = {39},
  journal      = {IEEE Transactions on Software Engineering},
  publisher    = {IEEE},
  year         = {2012}
}

@article{Hale1999,
  author       = {Hale, Joanne E and Sharpe, Shane and Hale, David P},
  date         = {1999},
  journaltitle = {Journal of Software Maintenance: Research and Practice},
  title        = {An evaluation of the cognitive processes of programmers engaged in software debugging},
  number       = {2},
  pages        = {73--91},
  volume       = {11},
  journal      = {Journal of Software Maintenance: Research and Practice},
  publisher    = {Wiley Online Library},
  year         = {1999}
}

@Article{Alpar2019,
  author       = {Alp{\'{a}}r, Greg and van Hoeve, Marloes},
  date         = {2019-12},
  title        = {Towards Growth-Mindset Mathematics Teaching in the Netherlands},
  issn         = {2516-2306},
  pages        = {1--17},
  series       = {Proceedings of Learning Innovations and Quality (LINQ) 2019},
  url          = {https://www.narcis.nl/publication/RecordID/oai:research.ou.nl:publications%2F19e2743e-ca48-40d9-9dac-80be220456e4},
  volume       = {2},
  abstractnote = {Mathematics is the foundation of sciences and it is important in a learner{\textquoteright}s career success. Growth mindset in mathematics teaching is essential to reach a broader student population effectively. Shifting the focus from performance and time pressure to deep understanding and personal growth, unnecessary competition vanishes among learners. As a result, they develop a better relation with their own thinking and they gain insights into the thinking of others. At the same time, collaboration and communication emerge naturally. The fear of mathematics and making mistakes disappear, while students learn by connecting ideas and applying the already learned study material. In the academic years of 2017-2018 and 2018-2019, two Dutch research projects dealt with the application of a growth mindset in mathematics teaching. One was in secondary schools, the other one at universities. In this article, we briefly report about and reflect on the exciting results of these studies and suggest further directions for research and the development of best practices. The ideas and experiences described in this paper are urgent as currently we are at the threshold of a new era in which education and learning are (and should be) really open for everyone},
  collection   = {Proceedings of Learning Innovations and Quality (LINQ) 2019},
  groups       = {exercises procedural guidance},
  journal      = {Proceedings of Learning Innova},
  year         = {2019},
}

@book{Dweck2017,
  author    = {Dweck, Carol},
  title     = {Mindset-updated edition: Changing the way you think to fulfil your potential},
  publisher = {Hachette UK},
  year      = {2017}
}

@PhdThesis{Stein2001,
  author = {Stein, Benno},
  title  = {Model Construction in Analysis and Synthesis Tasks},
  school = {Citeseer},
  year   = {2001},
}

@InProceedings{Lawende2021,
  author       = {Lawende, Maurits and Nl and Passier, Harrie and Alpár, Greg.},
  date         = {2021-06},
  title        = {Reproduction for Insight: Towards Better Understanding the Quality of Students Tests},
  doi          = {10.1145/3430665.3456316},
  publisher    = {Virtual Event},
  series       = {ACM Reference Format},
  abstract     = {Unit testing is an essential part of computer science education. Students leaving the university should be able to test at a high quality. Traditionally, teaching assistants or teachers themselves check projects and assignments manually. Clearly, this does not scale well. Furthermore, such methods are not suitable to easily get an overview of the overall student performance. A more efficient approach is the so-called all-pairs method, applied by the study of Edwards and Shams (ITiCSE, 2014). Each student implements both the unit (e.g. a class) and a corresponding test suite. Additionally, the teacher creates a reference implementation. The measurement is done by running all tests against all implementations. The present study builds on that research.
Our fundamental question is how teachers can get insight into the testing ability of their students. In particular, we develop a soft- ware framework and a replicable method. Students have to solve an implementation assignment. Assembling the results, the software provides an overview to the teachers about the test quality of each student’s work as well as of the overall testing ability of students. In this study, we replicate and improve the method of Edwards and Shams. We perform measurements to get a better understanding of the testing ability of our students (N = 98). Additionally, we lay the foundations to make the measurement of students test quality replicable; this enables us later to compare different study programs or the same student population before and after a given course.},
  abstractnote = {Unit testing is an essential part of computer science education. Students leaving the university should be able to test at a high quality. Traditionally, teaching assistants or teachers themselves check projects and assignments manually. Clearly, this does not scale well. Furthermore, such methods are not suitable to easily get an overview of the overall student performance. A more efficient approach is the so-called all-pairs method, applied by the study of Edwards and Shams (ITiCSE, 2014). Each student implements both the unit (e.g. a class) and a corresponding test suite. Additionally, the teacher creates a reference implementation. The measurement is done by running all tests against all implementations. The present study builds on that research. Our fundamental question is how teachers can get insight into the testing ability of their students. In particular, we develop a software framework and a replicable method. Students have to solve an implementation assignment. Assembling the results, the software provides an overview to the teachers about the test quality of each student&#39;s work as well as of the overall testing ability of students. In this study, we replicate and improve the method of Edwards and Shams. We perform measurements to get a better understanding of the testing ability of our students (N &#61; 98). Additionally, we lay the foundations to make the measurement of students test quality replicable; this enables us later to compare different study programs or the same student population before and after a given course. CCS CONCEPTS • Software and its engineering → Software testing and de-bugging; Formal software verification; • Applied computing → Education.},
  collection   = {ACM Reference Format},
  month        = {Jun},
  year         = {2021},
}

@Unpublished{AlparDoorn2021,
  author   = {Alp{\'{a}}r, Greg and Doorn, Niels.},
  date     = {12-04-2021},
  title    = {The Hardware Store},
  note     = {Requirements elicitation of an exercise using the open informatics approach and the procedure. We found the use of this approach interesting and useful. The design of the interfaces and the class let to an early understanding of the required design decisions. It also let to very specific, well founded set of test cases. The resulting production code reflects these conscious design decisions in it’s methods and arguments and in the naming of the members. The test class is extensive, but easy to follow due to the focus on critical test cases. Code coverage metrics support the conclusion that extra white box tests are not required. Applying the procedure was time consuming but the resulting code is well thought out and gives confidence in it’s quality.},
  subtitle = {An exercise analysis using the procedure},
  abstract = {Requirements elicitation of an exercise using the open informatics approach and the procedure. We found the use of this approach interesting and useful. The design of the interfaces and the class let to an early understanding of the required design decisions. It also let to very specific, well founded set of test cases. The resulting production code reflects these conscious design decisions in it’s methods and arguments and in the naming of the members. The test class is extensive, but easy to follow due to the focus on critical test cases. Code coverage metrics support the conclusion that extra white box tests are not required. Applying the procedure was time consuming but the resulting code is well thought out and gives confidence in it’s quality.},
  groups   = {exercises procedural guidance, OwnPublications},
  month    = {04},
  year     = {2021},
}

@Unpublished{Bijlsma2021,
  author   = {Bijlsma, Lex.},
  date     = {12-4-2021},
  title    = {Rental Agency},
  subtitle = {QPED working paper},
  month    = {04},
  year     = {2021},
}

@Article{Grossman2005,
  author    = {Grossman, Martin and Aronson, Jay E. and McCarthy, Richard V.},
  title     = {Does UML make the grade? Insights from the software development community},
  number    = {6},
  pages     = {383--397},
  volume    = {47},
  journal   = {Information and Software Technology},
  publisher = {Elsevier},
  year      = {2005},
}

@Article{Geitz2019,
  author    = {Gerry Geitz and Jan de Geus},
  title     = {Design-based education, sustainable teaching, and learning},
  doi       = {10.1080/2331186X.2019.1647919},
  editor    = {Luís Tinoca},
  eprint    = {https://doi.org/10.1080/2331186X.2019.1647919},
  number    = {1},
  pages     = {1647919},
  url       = {https://doi.org/10.1080/2331186X.2019.1647919},
  volume    = {6},
  journal   = {Cogent Education},
  publisher = {Cogent OA},
  year      = {2019},
}

@Article{BarrowsH.1996,
  author  = {Barrows H. S.},
  title   = {Problem‐based learning in medicine and beyond: A brief overview},
  pages   = {3},
  volume  = {68},
  groups  = {ReferencedByOtherLiterature},
  journal = {New Directions for Teaching and Learning},
  year    = {1996},
}

@Article{Biemans2004,
  author  = {Biemans H. and Nieuwenhuis L. and Poell R. and Mulder M. and Wesselink R.},
  title   = {Competence-based VET in the Netherlands: Background and pitfalls},
  pages   = {523},
  volume  = {56},
  groups  = {ReferencedByOtherLiterature},
  journal = {Journal of Vocational Education and Training},
  year    = {2004},
}

@Article{BiggsJ.1996,
  author  = {Biggs J. B.},
  title   = {Enhancing teaching through constructive alignment},
  pages   = {347},
  volume  = {32},
  groups  = {ReferencedByOtherLiterature},
  journal = {Higher Education},
  year    = {1996},
}

@Article{BiggsJ.2001,
  author  = {Biggs J. B. and Kember D. and Leung D. Y.},
  title   = {The revised two-factor Study Process Questionnaire: R-SPQ-2F},
  pages   = {133},
  volume  = {71},
  groups  = {ReferencedByOtherLiterature},
  journal = {The British Journal of Educational Psychology},
  year    = {2001},
}

@Article{ChurcherK.M.2014,
  author  = {Churcher K. M. A. and Downs E. and Tewsksbury D.},
  title   = {“Friending” Vygotsky: A social constructivist pedagogy of knowledge building through classroom social media use},
  pages   = {33},
  volume  = {14},
  groups  = {ReferencedByOtherLiterature},
  journal = {The Journal of Effective Teaching},
  year    = {2014},
}

@Article{DolmansD.H.J.2005,
  author  = {Dolmans D. H. J. M. and De Grave W. and Wolfhagen I. H. A. P. and Van Der Vleuten C. P. M.},
  title   = {Problem-based learning: Future challenges for educational practice and research},
  pages   = {732},
  volume  = {39},
  groups  = {ReferencedByOtherLiterature},
  journal = {Medical Education},
  year    = {2005},
}

@Article{Entwistle2004,
  author  = {Entwistle N. and McCune V.},
  title   = {The conceptual bases of study strategy inventories},
  pages   = {325},
  volume  = {16},
  groups  = {ReferencedByOtherLiterature},
  journal = {Educational Psychology Review},
  year    = {2004},
}

@Article{FlavellJ.1979,
  author  = {Flavell J. J.},
  title   = {Metacognition and cognitive monitoring},
  pages   = {906},
  volume  = {34},
  groups  = {ReferencedByOtherLiterature},
  journal = {American Psychologist},
  year    = {1979},
}

@Article{Hallinger2011,
  author  = {Hallinger P. and Lu J.},
  title   = {Implementing problem-based learning in higher education in Asia: Challenges, strategies and effect},
  pages   = {267},
  volume  = {33},
  groups  = {ReferencedByOtherLiterature},
  journal = {Journal of Higher Education Policy and Management},
  year    = {2011},
}

@Article{HattieJ.2016,
  author  = {Hattie J. A. and Donoghue G. M.},
  title   = {Learning strategies: A synthesis and conceptual model},
  pages   = {16013},
  volume  = {1},
  groups  = {ReferencedByOtherLiterature},
  journal = {NPJ Science of Learning},
  year    = {2016},
}

@Article{Heikkilae2006,
  author  = {Heikkilä A. and Lonka K.},
  title   = {Studying in higher education: Students’ approaches to learning, self-regulation, and cognitive strategies},
  pages   = {99},
  volume  = {31},
  groups  = {ReferencedByOtherLiterature},
  journal = {Studies in Higher Education},
  year    = {2006},
}

@Article{Heikkilae2012,
  author  = {Heikkilä A. and Lonka K. and Nieminen J. and Niemivirta M.},
  title   = {Relations between teacher student’s approaches to learning, cognitive and attributional strategies, well-being, and study success},
  pages   = {455},
  volume  = {64},
  groups  = {ReferencedByOtherLiterature},
  journal = {Higher Education},
  year    = {2012},
}

@Article{KoenenA.2015,
  author  = {Koenen A. K. and Dochy F. and Berghmans I.},
  title   = {A phenomenographic analysis of the implementation of competence-based education in higher education},
  pages   = {1},
  volume  = {50},
  groups  = {ReferencedByOtherLiterature},
  journal = {Teaching and Teacher Education},
  year    = {2015},
}

@Article{LindblomYlaenne2018,
  author  = {Lindblom-Ylänne S. and Parpala A. and Postareff L.},
  title   = {What constitutes the surface approach to learning in the light of new empirical evidence?},
  pages   = {1},
  groups  = {ReferencedByOtherLiterature},
  journal = {Studies in Higher Education},
  year    = {2018},
}

@Article{Lonka1996,
  author  = {Lonka K. and Lindblom-Ylänne S.},
  title   = {Epistemologies, conceptions of learning, and study practices in medicine and psychology},
  pages   = {5},
  volume  = {31},
  groups  = {ReferencedByOtherLiterature},
  journal = {Higher Education},
  year    = {1996},
}

@Article{LoyensS.2013,
  author  = {Loyens S. M. and Gijbels D. and Coertjens L. and Côté D. J.},
  title   = {Students’ approaches to learning in problem-based learning: Taking into account professional behavior in the tutorial groups, self-study time, and different assessment aspects},
  pages   = {23},
  volume  = {39},
  groups  = {ReferencedByOtherLiterature},
  journal = {Studies in Educational Evaluation},
  year    = {2013},
}

@Article{RamaleyJ.2014,
  author  = {Ramaley J. A.},
  title   = {The changing role of higher education: Learning to deal with wicked problems},
  pages   = {7},
  volume  = {18},
  groups  = {ReferencedByOtherLiterature},
  journal = {Journal of Higher Education Outreach and Engagement},
  year    = {2014},
}

@Article{SchmidtH.2009,
  author  = {Schmidt H. G. and van der Molen H. T. and Te Winkel W. W. R. T. and Wijnen W. H. F. W.},
  title   = {Constructivist, problem-based learning does work: A meta-analysis of curricular comparisons involving a single medical school},
  pages   = {227},
  volume  = {44},
  groups  = {ReferencedByOtherLiterature},
  journal = {Educational Psychologist},
  year    = {2009},
}

@Article{Smith2005,
  author  = {Smith K. and Sheppard S. and Johnson D. and Johnson R.},
  title   = {Pedagogies of engagement: Classroom-based practices},
  pages   = {87},
  volume  = {94},
  groups  = {ReferencedByOtherLiterature},
  journal = {Journal of Engineering Education},
  year    = {2005},
}

@Article{Walker1996,
  author  = {Walker A. and Bridges E. and Chan B.},
  title   = {Wisdom gained, wisdom given: Instituting PBL in a Chinese culture},
  pages   = {12},
  volume  = {34},
  groups  = {ReferencedByOtherLiterature},
  journal = {Journal of Educational Administration},
  year    = {1996},
}

@Article{ZimmermanB.2002,
  author  = {Zimmerman B. J.},
  title   = {Becoming a self-regulated learner: An overview},
  pages   = {64},
  volume  = {41},
  groups  = {ReferencedByOtherLiterature},
  journal = {Theory into Practice},
  year    = {2002},
}

@Article{ZimmermanB.1999,
  author  = {Zimmerman B. J. and Kitsantas A.},
  title   = {Acquiring writing revision skill: Shifting from process to outcome self-regulatory goals},
  pages   = {241},
  volume  = {91},
  groups  = {ReferencedByOtherLiterature},
  journal = {Journal of Educational Psychology},
  year    = {1999},
}



%%%%%%%%%%%%%
% Java Books
%%%%%%%%%%%%%

@book{blueJbook_BK2020,
author = {Barnes, David J. and Klling, Michael},
title = {Objects First with Java: A Practical Introduction Using BlueJ},
year = {2020},
publisher = {PEARSON},
address = {USA},
edition = {6th},
abstract = {Objects First with Java: A Practical Introduction Using BlueJ, 5e, is ideal for introductory courses in Java/Introduction to Programming and Object-Oriented Programming and for beginning programmers.This is the only introductory programming textbook that uses the BlueJ integrated development environment (IDE) to teach introductory and object-oriented programming principles using Java. Its close integration with the BlueJdevelopment environment allows this book tofocus on key aspects of object-oriented software development from day one. BlueJ's clear visualization of classes and objects means that readers can immediately appreciate the differences between them, and gain a much better understanding of the nature of an object than theywould from simply reading source code. Unlike traditional textbooks, the chapters are not ordered by language features but by software development concepts. Language features are introduced as a response to the problems to be solved. A large numberof different, interesting projects are used to provide variety and avoid the monotony of a running problem. This book takes an objects first approach to teaching the traditionally difficult concepts of objects in a manipulative visual form. Throughout, the emphasis is on developing a practical approach to programming, with students encouraged to add code to existing programs rather than working with an intimidating sheet of blank paper. This textbook is printed in four-color to aid pedagogy and reader learning.}
}

@Article{Janzen2008,
  author       = {Janzen, David and Saiedian, Hossein},
  date         = {2008-03},
  title        = {Test-Driven Learning in Early Programming Courses},
  doi          = {10.1145/1352322.1352315},
  issn         = {0097-8418},
  number       = {1},
  pages        = {532–536},
  series       = {SIGCSE {\textquoteright}08},
  url          = {https://doi.org/10.1145/1352322.1352315},
  volume       = {40},
  abstract     = {Coercing new programmers to adopt disciplined development practices such as thorough unit testing is a challenging endeavor. Test-driven development (TDD) has been proposed as a solution to improve both software design and testing. Test-driven learning (TDL) has been proposed as a pedagogical approach for teaching TDD without imposing significant additional instruction time.This research evaluates the effects of students using a test-first (TDD) versus test-last approach in early programming courses, and considers the use of TDL on a limited basis in CS1 and CS2. Software testing, programmer productivity, programmer performance, and programmer opinions are compared between test-first and test-last programming groups. Results from this research indicate that a test-first approach can increase student testing and programmer performance, but that early programmers are very reluctant to adopt a test-first approach, even after having positive experiences using TDD. Further, this research demonstrates that TDL can be applied in CS1/2, but suggests that a more pervasive implementation of TDL may be necessary to motivate and establish disciplined testing practice among early programmers.},
  abstractnote = {Coercing new programmers to adopt disciplined development practices such as thorough unit testing is a challenging endeavor. Test-driven development (TDD) has been proposed as a solution to improve both software design and testing. Test-driven learning (TDL) has been proposed as a pedagogical approach for teaching TDD without imposing significant additional instruction time. This research evaluates the effects of students using a test-first (TDD) versus test-last approach in early programming courses, and considers the use of TDL on a limited basis in CS1 and CS2. Software testing, programmer productivity, programmer performance, and programmer opinions are compared between test-first and test-last programming groups. Results from this research indicate that a test-first approach can increase student testing and programmer performance, but that early programmers are very reluctant to adopt a test-first approach, even after having positive experiences using TDD. Further, this research demonstrates that TDL can be applied in CS1/2, but suggests that a more pervasive implementation of TDL may be necessary to motivate and establish disciplined testing practice among early programmers.},
  address      = {New York, NY, USA},
  collection   = {SIGCSE {\textquoteright}08},
  file         = {:Janzen2008 - Test Driven Learning in Early Programming Courses.pdf:PDF;:Janzen2008 - Test Driven Learning in Early Programming Courses.pdf:PDF},
  groups       = {TILDE},
  isbn         = {1595937994},
  issue_date   = {March 2008},
  journal      = {SIGCSE Bull.},
  keywords     = {cs1, pedagogy, test-driven learning, test-driven development},
  month        = mar,
  numpages     = {5},
  publisher    = {Association for Computing Machinery},
  year         = {2008},
}

@Article{Desai2009,
  author       = {Desai, Chetan and Janzen, David S. and Clements, John},
  date         = {2009-03},
  title        = {Implications of Integrating Test-Driven Development into CS1/CS2 Curricula},
  doi          = {10.1145/1539024.1508921},
  issn         = {0097-8418},
  number       = {1},
  pages        = {148–152},
  series       = {SIGCSE {\textquoteright}09},
  url          = {https://doi.org/10.1145/1539024.1508921},
  volume       = {41},
  abstract     = {Many academic and industry professionals have called for more testing in computer science curricula. Test-driven development (TDD) has been proposed as a solution to improve testing in academia. This paper demonstrates how TDD can be integrated into existing course materials without reducing topic coverage. Two controlled experiments were conducted in a CS1/CS2 course in Winter 2008. Following a test-driven learning approach, unit testing was introduced at the beginning of the course and reinforced through example. Results indicate that while student work loads may increase with the incorporation of TDD, students are able to successfully develop unit tests while learning to program.},
  abstractnote = {Many academic and industry professionals have called for more testing in computer science curricula. Test-driven development (TDD) has been proposed as a solution to improve testing in academia. This paper demonstrates how TDD can be integrated into existing course materials without reducing topic coverage. Two controlled experiments were conducted in a CS1/CS2 course in Winter 2008. Following a test-driven learning approach, unit testing was introduced at the beginning of the course and reinforced through example. Results indicate that while student work loads may increase with the incorporation of TDD, students are able to successfully develop unit tests while learning to program.},
  address      = {New York, NY, USA},
  collection   = {SIGCSE {\textquoteright}09},
  file         = {:Desai2009 - Implications of Integrating Test Driven Development into CS1_CS2 Curricula.pdf:PDF;:Desai2009 - Implications of Integrating Test Driven Development into CS1_CS2 Curricula.pdf:PDF},
  groups       = {TILDE},
  isbn         = {1605581836},
  issue_date   = {March 2009},
  journal      = {SIGCSE Bull.},
  keywords     = {test-driven learning, cs2, test-driven development, cs1},
  month        = mar,
  numpages     = {5},
  publisher    = {Association for Computing Machinery},
  year         = {2009},
}

@InProceedings{Janzen2006,
  author       = {Janzen, David and Saiedian, Hossein},
  booktitle    = {Proceedings of the 37th SIGCSE Technical Symposium on Computer Science Education},
  date         = {2006-03},
  title        = {Test-driven learning},
  doi          = {10.1145/1121341.1121419},
  isbn         = {9781595932594},
  location     = {Houston, Texas, USA},
  pages        = {254--258},
  publisher    = {ACM},
  series       = {SIGCSE {\textquoteright}06},
  url          = {http://dl.acm.org/citation.cfm?id=1121419},
  abstract     = {Test-driven learning (TDL) is an approach to teaching computer programming that involves introducing and exploring new concepts through automated unit tests. TDL offers the potential of teaching testing for free, of improving programmer comprehension and ability, and of improving software quality both in terms of design quality and reduced defect density.This paper introduces test-driven learning as a pedagogical tool. It will provide examples of how TDL can be incorporated at multiple levels in computer science and software engineering curriculum for beginning through professional programmers. In addition, the relationships between TDL and test-driven development will be explored.Initial evidence indicates that TDL can improve student comprehension of new concepts while improving their testing skills with no additional instruction time. In addition, by learning to construct programs in a test-driven manner, students are expected to be more likely to develop their own code with a test-driven approach, likely resulting in improved software designs and quality.},
  abstractnote = {Test-driven learning (TDL) is an approach to teaching computer programming that involves introducing and exploring new concepts through automated unit tests. TDL offers the potential of teaching testing for free, of improving programmer comprehension and ability, and of improving software quality both in terms of design quality and reduced defect density.This paper introduces test-driven learning as a pedagogical tool. It will provide examples of how TDL can be incorporated at multiple levels in computer science and software engineering curriculum for beginning through professional programmers. In addition, the relationships between TDL and test-driven development will be explored.Initial evidence indicates that TDL can improve student comprehension of new concepts while improving their testing skills with no additional instruction time. In addition, by learning to construct programs in a test-driven manner, students are expected to be more likely to develop their own code with a test-driven approach, likely resulting in improved software designs and quality.},
  address      = {New York, NY, USA},
  collection   = {SIGCSE {\textquoteright}06},
  groups       = {TILDE},
  keywords     = {test-driven development, test-driven learning, CS1, pedagogy, extreme programming},
  numpages     = {5},
  year         = {2006},
}

@Misc{Wikipedia2021Hashing,
  author = {{Wikipedia contributors}},
  title  = {Cryptographic hash function --- {Wikipedia}{,} The Free Encyclopedia},
  note   = {[Online; accessed 23-April-2021]},
  url    = {https://en.wikipedia.org/w/index.php?title=Cryptographic_hash_function&oldid=1019339277},
  year   = {2021},
}

@InProceedings{Hoch2008,
  author    = {Hoch, Jonathan J. and Shamir, Adi},
  booktitle = {Automata, Languages and Programming},
  title     = {On the Strength of the Concatenated Hash Combiner When All the Hash Functions Are Weak},
  editor    = {Aceto, Luca and Damg{\aa}rd, Ivan and Goldberg, Leslie Ann and Halld{\'o}rsson, Magn{\'u}s M. and Ing{\'o}lfsd{\'o}ttir, Anna and Walukiewicz, Igor},
  isbn      = {978-3-540-70583-3},
  pages     = {616--630},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {At Crypto 2004 Joux showed a novel attack against the concatenated hash combiner instantiated with Merkle-Damg{\aa}rd iterated hash functions. His method of producing multicollisions in the design was the first in a recent line of generic attacks against the Merkle-Damg{\aa}rd construction. In the same paper, Joux raised an open question concerning the strength of the concatenated hash combiner and asked whether his attack can be improved when the attacker can efficiently find collisions in both underlying compression functions. We solve this open problem by showing that even in the powerful adversarial scenario first introduced by Liskov (SAC 2006) in which the underlying compression functions can be fully inverted (which implies that collisions can be easily generated), collisions in the concatenated hash cannot be created using fewer than 2n/2 queries. We then expand this result to include the double pipe hash construction of Lucks from Asiacrypt 2005. One of the intermediate results is of interest on its own and provides the first streamable construction provably indifferentiable from a random oracle in this model.},
  address   = {Berlin, Heidelberg},
  groups    = {TILDE},
  year      = {2008},
}

@Article{Mouha2018,
  author   = {Mouha, Nicky and Raunak, Mohammad S. and Kuhn, D. Richard and Kacker, Raghu},
  title    = {Finding Bugs in Cryptographic Hash Function Implementations},
  doi      = {10.1109/TR.2018.2847247},
  issn     = {1558-1721},
  number   = {3},
  pages    = {870-884},
  volume   = {67},
  abstract = {Cryptographic hash functions are security-critical algorithms with many practical applications, notably in digital signatures. Developing an approach to test them can be particularly difficult, and bugs can remain unnoticed for many years. We revisit the National Institute of Standards and Technology hash function competition, which was used to develop the SHA-3 standard, and apply a new testing strategy to all available reference implementations. Motivated by the cryptographic properties that a hash function should satisfy, we develop four tests. The Bit-Contribution Test checks if changes in the message affect the hash value, and the Bit-Exclusion Test checks that changes beyond the last message bit leave the hash value unchanged. We develop the Update Test to verify that messages are processed correctly in chunks, and then use combinatorial testing methods to reduce the test set size by several orders of magnitude while retaining the same fault-detection capability. Our tests detect bugs in 41 of the 86 reference implementations submitted to the SHA-3 competition, including the rediscovery of a bug in all submitted implementations of the SHA-3 finalist BLAKE. This bug remained undiscovered for seven years, and is particularly serious because it provides a simple strategy to modify the message without changing the hash value returned by the implementation. We detect these bugs using a fully automated testing approach.},
  groups   = {TILDE},
  journal  = {IEEE Transactions on Reliability},
  month    = {Sep.},
  year     = {2018},
}

@TechReport{Rukhin2001,
  author      = {Rukhin, Andrew and Soto, Juan and Nechvatal, James and Smid, Miles and Barker, Elaine},
  institution = {Booz-allen and hamilton inc mclean va},
  title       = {A statistical test suite for random and pseudorandom number generators for cryptographic applications},
  doi         = {10.6028/nist.sp.800-22r1a},
  groups      = {TILDE},
  year        = {2001},
}

@InProceedings{Gauravaram2012,
  author    = {Gauravaram, Praveen},
  booktitle = {2012 International Conference on Advanced Computer Science Applications and Technologies (ACSAT)},
  title     = {Security Analysis of salt||password Hashes},
  doi       = {10.1109/ACSAT.2012.49},
  pages     = {25-30},
  groups    = {TILDE},
  year      = {2012},
}

@WWW{Thomas2021,
  author = {Dave Thomas},
  date   = {2021-04-26},
  title  = {Kata21: Simple Lists},
  url    = {http://codekata.com/kata/kata21-simple-lists/},
  groups = {exercises procedural guidance},
}

@Unknown{Tebes2020,
  author = {Tebes, Guido and Peppino, Denis and Becker, Pablo and Olsina, Luis},
  groups = {TILDE},
  month  = {10},
  title  = {TestTDO v1.2's Terms, Properties, Relationships and Axioms -- A Top-Domain Software Testing Ontology},
  year   = {2020},
}

@Comment{jabref-meta: databaseType:biblatex;}

@Comment{jabref-meta: grouping:
0 AllEntriesGroup:;
1 StaticGroup:ReferencedByOtherLiterature\;0\;1\;0x990000ff\;\;\;;
1 StaticGroup:OwnPublications\;0\;1\;0x669966ff\;\;\;;
1 StaticGroup:TILDE\;0\;1\;0x800080ff\;\;\;;
1 StaticGroup:exercises procedural guidance\;0\;0\;0x331a80ff\;\;\;;
}
